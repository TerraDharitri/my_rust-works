// Code generated by the dharitri-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use dharitri_sc::proxy_imports::*;

pub struct PayableFeaturesProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for PayableFeaturesProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = PayableFeaturesProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        PayableFeaturesProxyMethods { wrapped_tx: tx }
    }
}

pub struct PayableFeaturesProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> PayableFeaturesProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> PayableFeaturesProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn echo_call_value_legacy(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, ManagedVec<Env::Api, DcdtTokenPayment<Env::Api>>>> {
        self.wrapped_tx
            .raw_call("echo_call_value_legacy")
            .original_result()
    }

    pub fn echo_call_value(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, RewaOrDcdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("echo_call_value")
            .original_result()
    }

    pub fn payment_multiple(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, DcdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payment_multiple")
            .original_result()
    }

    pub fn payable_all_transfers(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, RewaOrDcdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_all_transfers")
            .original_result()
    }

    pub fn payment_array_dcdt_3(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue3<DcdtTokenPayment<Env::Api>, DcdtTokenPayment<Env::Api>, DcdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payment_array_dcdt_3")
            .original_result()
    }

    pub fn payment_array_rewa_dcdt_3(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue3<RewaOrDcdtTokenPayment<Env::Api>, RewaOrDcdtTokenPayment<Env::Api>, RewaOrDcdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payment_array_rewa_dcdt_3")
            .original_result()
    }

    pub fn payable_any_1(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_any_1")
            .original_result()
    }

    pub fn payable_any_2(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_any_2")
            .original_result()
    }

    pub fn payable_any_3(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_any_3")
            .original_result()
    }

    pub fn payable_any_4(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_any_4")
            .original_result()
    }

    pub fn payable_rewa_1(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_rewa_1")
            .original_result()
    }

    pub fn payable_rewa_2(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_rewa_2")
            .original_result()
    }

    pub fn payable_rewa_3(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_rewa_3")
            .original_result()
    }

    pub fn payable_rewa_4(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_rewa_4")
            .original_result()
    }

    pub fn payable_token_1(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_token_1")
            .original_result()
    }

    pub fn payable_token_2(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, TokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_token_2")
            .original_result()
    }

    pub fn payable_token_3(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, RewaOrDcdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_token_3")
            .original_result()
    }

    pub fn payable_token_4(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, TokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .raw_call("payable_token_4")
            .original_result()
    }
}
